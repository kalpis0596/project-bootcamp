name: terraform and ansible

on:
  #push:
  workflow_dispatch:
  push:
    branches: [main]

  pull_request:
    branches: [main]

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    #environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ./terraform/

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
        terraform_wrapper: false

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    #Enter keyID and AccesKEY
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID}}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-southeast-1

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false
      
      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      #if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
      run: terraform apply -auto-approve -input=false

      #Print public ip address
    - name: Print public ip address
      run: |
        terraform output -raw wp-ip_public_addr
        echo "ip_addrs=$(terraform output -raw wp-ip_public_addr)" >> $GITHUB_ENV
        echo $ip_addrs

  ansible:
    name: Deploy Ansible Playbook
    #if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    needs: terraform

    environment: Ready-to-deploy
    steps:

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up SSH
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > private_key.pem
          chmod 600 private_key.pem

      - name: Install Ansible
        shell: bash
        run: |
          sudo apt update
          sudo apt install -y ansible

      - name: Run ssh service start
        shell: bash
        run: |
          sudo service ssh start

      - name: Run Ansible Playbook
        env:
          ANSIBLE_USER: ubuntu
          ANSIBLE_HOST_KEY_CHECKING: False
        run: |
          ansible-playbook -i ansible/host.ini ansible/playbook-docker.yaml --private-key private_key.pem -u ubuntu -vvv
    
